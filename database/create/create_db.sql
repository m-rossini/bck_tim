

-- Table: BCK_ACCOUNT_DM
CREATE TABLE BCK_ACCOUNT_DM (
	OBJID 				NUMBER(19,0) 	NOT NULL, 
	ACCOUNT_TYPE 		VARCHAR2(8)			, 
	HOLDING_NUMBER 		VARCHAR2(32)			, 
	ACCOUNT_NUMBER 		VARCHAR2(32)			, 
	CUSTOM_1 			VARCHAR2(30)		, 
	CUSTOM_2 			VARCHAR2(30)		, 
	CUSTOM_3 			VARCHAR2(30)
); 

ALTER TABLE BCK_ACCOUNT_DM ADD CONSTRAINT BCK_ACCOUNT_DM_PK
	 PRIMARY KEY (OBJID);
	 
CREATE UNIQUE INDEX BCK_ACCOUNT_IDX1 ON  BCK_ACCOUNT_DM (ACCOUNT_NUMBER);

-- Table: BCK_CARRIER_DM
CREATE TABLE  BCK_CARRIER_DM (
	OBJID 				NUMBER(19,0) 	NOT NULL, 
	CARRIER_NAME 			VARCHAR2(48)		, 
	CARRIER_CODE 			VARCHAR2(8)	NOT NULL, 
	CARRIER_STATE 			VARCHAR2(8)	NOT NULL, 
	CUSTOM_1 			VARCHAR2(30)		, 
	CUSTOM_2 			VARCHAR2(30)		, 
	CUSTOM_3 			VARCHAR2(30) 
);

ALTER TABLE BCK_CARRIER_DM ADD CONSTRAINT BCK_CARRIER_DM_PK
	 PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX BCK_CARRIER_DM_IX01 ON BCK_CARRIER_DM (CARRIER_CODE, CARRIER_STATE, CARRIER_NAME);

-- Table: BCK_CARRIER_DATA
CREATE TABLE  BCK_CARRIER_DATA (
	OBJID 						NUMBER(19,0) 	NOT NULL,
	CARRIER_FULL_NAME			VARCHAR2(128)	NOT NULL,
	CARRIER_TAX_ID				VARCHAR2(24)	NOT NULL,
	CARRIER_STATE_ENROLL_NBR	VARCHAR2(32)			,
	CARRIER_CITY_ENROLL_NBR		VARCHAR2(32)			,
	ADDR_STREET					VARCHAR2(128)	NOT NULL,
	ADDR_NUMBER					VARCHAR2(32)		NOT NULL,
	ADDR_COMPLEMENT				VARCHAR2(32)	NOT NULL,
	ADDR_ZIP					VARCHAR2(16)	NOT NULL,
	ADDR_CITY					VARCHAR2(64)	NOT NULL,
	ADDR_WEB					VARCHAR2(64)	NOT NULL,
	ADDR_EMAIL					VARCHAR2(64)	NOT NULL,
	CARRIER_DM_UID				NUMBER(19,0)			,
	CUSTOM_1					VARCHAR2(30)			, 
	CUSTOM_2					VARCHAR2(30)			, 
	CUSTOM_3					VARCHAR2(30)
);

ALTER TABLE BCK_CARRIER_DATA ADD CONSTRAINT BCK_CARRIER_DATA_PK
	 PRIMARY KEY (OBJID);

ALTER TABLE BCK_CARRIER_DATA ADD CONSTRAINT BCK_CARRIER_DATA_FK1
	 FOREIGN KEY (CARRIER_DM_UID) REFERENCES BCK_CARRIER_DM (OBJID);

-- Table: BCK_CYCLE_DM
CREATE TABLE BCK_CYCLE_DM (
	OBJID	 			NUMBER(19,0) 	NOT NULL, 
	CYCLE_CODE 			VARCHAR2(8)		, 
	CUT_DATE 			DATE			, 
	ISSUE_DATE 			DATE			, 
	DUE_DATE 			DATE			, 
	CUSTOM_1 			VARCHAR2(30 CHAR)	, 
	CUSTOM_2 			VARCHAR2(30 CHAR)	, 
	CUSTOM_3 			VARCHAR2(30 CHAR)
); 

ALTER TABLE BCK_CYCLE_DM ADD CONSTRAINT BCK_CYCLE_DM_PK
	 PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX BCK_CYCLE_IDX1 ON  BCK_CYCLE_DM (CYCLE_CODE, CUT_DATE, DUE_DATE);

-- due to problems with JPivot
CREATE OR REPLACE FORCE VIEW BCK_CYCLE_DM_VIEW 
	(OBJID, CYCLE_CODE, CUT_YEAR,CUT_DATE, CUT_DATE_ORDER, ISSUE_DATE, ISSUE_DATE_ORDER, DUE_DATE, DUE_DATE_ORDER) AS 
	( SELECT OBJID, CYCLE_CODE, to_char(CUT_DATE, 'YYYY') as CUT_YEAR, to_char(CUT_DATE, 'DD/MM/YY') as CUT_DATE, CUT_DATE as CUT_DATE_ORDER, 
	         to_char(ISSUE_DATE) as ISSUE_DATE, ISSUE_DATE as ISSUE_DATE_ORDER,
	         to_char(DUE_DATE, 'DD/MM/YY') as DUE_DATE, DUE_DATE as DUE_DATE_ORDER
  from BCK_CYCLE_DM );

-- Table: BCK_GEO_DM
CREATE TABLE BCK_GEO_DM (
	OBJID 				NUMBER(19,0) 	NOT NULL, 
	GEO_COUNTRY 			VARCHAR2(32)		,
	GEO_REGION 			VARCHAR2(16)		,
	GEO_STATE 			VARCHAR2(2)		,
	GEO_CITY 			VARCHAR2(64)		,
	CUSTOM_1 			VARCHAR2(30)		,
	CUSTOM_2 			VARCHAR2(30)		, 
	CUSTOM_3 			VARCHAR2(30)
);	
	
ALTER TABLE BCK_GEO_DM ADD CONSTRAINT BCK_GEO_DM_PK
	 PRIMARY KEY (OBJID);
	 
CREATE UNIQUE INDEX BCK_GEO_IX01 ON BCK_GEO_DM (GEO_COUNTRY, GEO_STATE, GEO_CITY);

-- Table: BCK_TIME_DM
CREATE TABLE BCK_TIME_DM (
	OBJID 				NUMBER(19,0) 	NOT NULL, 
	TIME_YEAR 			VARCHAR2(4)		, 
	TIME_MONTH 			VARCHAR2(2)		, 
	TIME_DAY 			VARCHAR2(2)		, 
	CUSTOM_1 			VARCHAR2(30)		,
	CUSTOM_2 			VARCHAR2(30)		,
	CUSTOM_3 			VARCHAR2(30)
);
 
ALTER TABLE BCK_TIME_DM ADD CONSTRAINT BCK_TIME_DM_PK
	 PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX BCK_TIME_IDX1 ON  BCK_TIME_DM (TIME_YEAR, TIME_MONTH, TIME_DAY);


-- Table: BCK_RULE_TYPE
CREATE TABLE BCK_RULE_TYPE (
	OBJID 				NUMBER(19,0) 	NOT NULL, 
	TYPE_NAME 			VARCHAR2(32) 	NOT NULL, 
	DESCRIPTION 			VARCHAR2(128)		, 
	CUSTOM_1 			VARCHAR2(30)		, 
	CUSTOM_2 			VARCHAR2(30)		, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE BCK_RULE_TYPE ADD CONSTRAINT BCK_RULE_TYPE_PK
	 PRIMARY KEY (OBJID); 
	 
ALTER TABLE BCK_RULE_TYPE ADD CONSTRAINT BCK_RULE_TYPE_UK1
	 UNIQUE (TYPE_NAME);


-- Table: BCK_RULE
CREATE TABLE BCK_RULE (	
	OBJID 				NUMBER(19,0) 	NOT NULL, 
	RULE_CODE 			VARCHAR2(16) 	NOT NULL, 
	RULE_NAME 			VARCHAR2(32) 	NOT NULL, 
	DESCRIPTION 			VARCHAR2(128)		, 
	RULE_TYPE_UID 			NUMBER(19,0)		, 
	CUSTOM_1 			VARCHAR2(30)		, 
	CUSTOM_2 			VARCHAR2(30)		, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE BCK_RULE ADD CONSTRAINT BCK_RULE_PK
	 PRIMARY KEY (OBJID);
	 
ALTER TABLE BCK_RULE ADD CONSTRAINT BCK_RULE_UK1
	 UNIQUE (RULE_CODE);

ALTER TABLE BCK_RULE ADD CONSTRAINT BCK_RULE_FK1
	FOREIGN KEY (RULE_TYPE_UID) REFERENCES BCK_RULE_TYPE (OBJID);


-- Table: BCK_CONSEQUENCE_ATTR
CREATE TABLE BCK_CONSEQUENCE_ATTR (
	 OBJID NUMBER(19,0) NOT NULL, 
   ATTR_NAME_1 VARCHAR2(32),
   ATTR_VALUE_1 VARCHAR2(128),
   ATTR_NAME_2 VARCHAR2(32),
   ATTR_VALUE_2 VARCHAR2(128),
   ATTR_NAME_3 VARCHAR2(32),
   ATTR_VALUE_3 VARCHAR2(128),
   ATTR_NAME_4 VARCHAR2(32),
   ATTR_VALUE_4 VARCHAR2(128),
   ATTR_NAME_5 VARCHAR2(32),
   ATTR_VALUE_5 VARCHAR2(128),
   ATTR_NAME_6 VARCHAR2(32),
   ATTR_VALUE_6 VARCHAR2(128),
   ATTR_NAME_7 VARCHAR2(32),
   ATTR_VALUE_7 VARCHAR2(128),
   ATTR_NAME_8 VARCHAR2(32),
   ATTR_VALUE_8 VARCHAR2(128),
   ATTR_NAME_9 VARCHAR2(32),
   ATTR_VALUE_9 VARCHAR2(128),
   ATTR_NAME_10 VARCHAR2(32),
   ATTR_VALUE_10 VARCHAR2(128),
   ATTR_NAME_11 VARCHAR2(32),
   ATTR_VALUE_11 VARCHAR2(128),
   ATTR_NAME_12 VARCHAR2(32),
   ATTR_VALUE_12 VARCHAR2(128),
   ATTR_NAME_13 VARCHAR2(32),
   ATTR_VALUE_13 VARCHAR2(128),
   ATTR_NAME_14 VARCHAR2(32),
   ATTR_VALUE_14 VARCHAR2(128),
   ATTR_NAME_15 VARCHAR2(32),
   ATTR_VALUE_15 VARCHAR2(128),
   ATTR_NAME_16 VARCHAR2(32),
   ATTR_VALUE_16 VARCHAR2(128),
   ATTR_NAME_17 VARCHAR2(32),
   ATTR_VALUE_17 VARCHAR2(128),
   ATTR_NAME_18 VARCHAR2(32),
   ATTR_VALUE_18 VARCHAR2(128),
   ATTR_NAME_19 VARCHAR2(32),
   ATTR_VALUE_19 VARCHAR2(128),
   ATTR_NAME_20 VARCHAR2(32),
   ATTR_VALUE_20 VARCHAR2(128)
);

ALTER TABLE BCK_CONSEQUENCE_ATTR ADD CONSTRAINT BCK_CONSEQUENCE_ATTR_PK
	 PRIMARY KEY (OBJID); 

-- Table: BCK_CONSEQUENCE
CREATE TABLE  BCK_CONSEQUENCE (	
 	OBJID 			NUMBER(19,0) 	NOT NULL, 
	ACCOUNT_UID 		NUMBER(19,0) 	NOT NULL,
	CARRIER_UID 		NUMBER(19,0) 	NOT NULL,
	CYCLE_UID 		NUMBER(19,0) 	NOT NULL,
	GEO_UID 		NUMBER(19,0) 	NOT NULL,
	TIME_UID 		NUMBER(19,0) 	NOT NULL,
	RULE_UID 		NUMBER(19,0) 	NOT NULL,
	TRANSACTION_ID 		VARCHAR2(64)		, 
	DESCRIPTION 		VARCHAR2(128)		, 
	CONSEQUENCE_LEVEL 	VARCHAR2(10) 	NOT NULL,
   	ATTRIBUTE_UID 		NUMBER(19) 	NOT NULL,
   	FILENAME            	VARCHAR2(256)           ,
	CUSTOM_1 		VARCHAR2(30)		, 
	CUSTOM_2 		VARCHAR2(30)		, 
	CUSTOM_3 		VARCHAR2(30)		, 
	CUSTOM_4 		VARCHAR2(30)		, 
	CUSTOM_5 		VARCHAR2(30)
);

ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_PK
	PRIMARY KEY (OBJID); 
	
ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK1
	 FOREIGN KEY (ACCOUNT_UID) REFERENCES BCK_ACCOUNT_DM (OBJID);
	  
ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK2
	FOREIGN KEY (TIME_UID) REFERENCES BCK_TIME_DM (OBJID);
	
ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK3
	FOREIGN KEY (RULE_UID) REFERENCES BCK_RULE (OBJID);
	
ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK4
	FOREIGN KEY (GEO_UID) REFERENCES BCK_GEO_DM (OBJID);
	
ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK5
	FOREIGN KEY (CARRIER_UID) REFERENCES BCK_CARRIER_DM (OBJID);
	
ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK6
	FOREIGN KEY (CYCLE_UID) REFERENCES BCK_CYCLE_DM (OBJID);

ALTER TABLE BCK_CONSEQUENCE ADD CONSTRAINT BCK_CONSEQUENCE_FK7
  FOREIGN KEY (ATTRIBUTE_UID) REFERENCES BCK_CONSEQUENCE_ATTR (OBJID);
  
  
CREATE UNIQUE INDEX BCK_CONSEQUENCE_IDX1 ON BCK_CONSEQUENCE (ATTRIBUTE_UID);  
	
-- Creates the Invoice fact table
CREATE TABLE BCK_INVOICE_FACT (
  CYCLE_ID                                  NUMBER(19) NOT NULL,
  ACCOUNT_ID                                NUMBER(19) NOT NULL,
  CARRIER_ID                                NUMBER(19) NOT NULL,
  GEO_ID                                    NUMBER(19) NOT NULL,
  TIME_ID                                   NUMBER(19) NOT NULL,
  TOTAL_AMOUNT                              NUMBER(14,6) NOT NULL,
  TRANSACTION_ID 			    VARCHAR2(64)
);

CREATE INDEX BCK_INVOICE_FACT_IDX1 ON BCK_INVOICE_FACT (CYCLE_ID);


CREATE TABLE BCK_CONTRACT_TOTALS_FACT (
  CYCLE_ID                                  NUMBER(19) NOT NULL,
  ACCOUNT_ID                                NUMBER(19) NOT NULL,
  CARRIER_ID                                NUMBER(19) NOT NULL,
  GEO_ID                                    NUMBER(19) NOT NULL,
  TIME_ID                                   NUMBER(19) NOT NULL,
  CONTRACT_ID                               NUMBER(19) NOT NULL,
  RATEPLAN_ID                               NUMBER(19) NOT NULL,
  TOTAL_AMOUNT                              NUMBER(14,6) NOT NULL,
  EVENT_COUNT                               NUMBER(10) NOT NULL,  
  USED_VOLUME				    NUMBER(14) NOT NULL,
  TRANSACTION_ID 			    VARCHAR2(64)
);

CREATE INDEX BCK_CONTRACT_TOTALS_FACT_IDX1 ON BCK_CONTRACT_TOTALS_FACT (CYCLE_ID, ACCOUNT_ID, CONTRACT_ID);

CREATE TABLE BCK_CONTRACT_DM (
  OBJID                                     NUMBER(19)  NOT NULL,
  CONTRACT_NUMBER							VARCHAR2(20) NOT NULL,
  ACCESS_NUMBER								VARCHAR2(20),
  CUSTOMER_NAME								VARCHAR2(50)
);

ALTER TABLE BCK_CONTRACT_DM ADD CONSTRAINT BCK_CONTRACT_DM_PK 
   PRIMARY KEY (OBJID);
   
CREATE INDEX BCK_CONTRACT_DM_IDX1 ON BCK_CONTRACT_DM (CONTRACT_NUMBER, ACCESS_NUMBER);



CREATE TABLE BCK_RATEPLAN_DM (
  OBJID                                     NUMBER(19)  NOT NULL,
  RATEPLAN_NAME								VARCHAR2(30) NOT NULL,
  SERVICE_TYPE 								VARCHAR2(50) NOT NULL  
);

ALTER TABLE BCK_RATEPLAN_DM ADD CONSTRAINT BCK_RATEPLAN_DM_PK 
   PRIMARY KEY (OBJID);
   
CREATE INDEX BCK_RATEPLAN_DM_IDX1 ON BCK_RATEPLAN_DM (RATEPLAN_NAME, SERVICE_TYPE);


-- sequences	 
CREATE SEQUENCE BCK_CONSEQUENCE_UID INCREMENT BY 1 START WITH 1;
CREATE SEQUENCE BCK_DIMENSIONS_UID INCREMENT BY 1 START WITH 1;


CREATE TABLE BCK_PARM_RECEIPT_THRESHOLDS (
  OBJID                 NUMBER(19)  		NOT NULL,
	OP_CODE_NAME				VARCHAR2(8),
	OP_UF					VARCHAR2(2),
	MIN_VALUE				DECIMAL(15,2)							,
	MAX_VALUE				DECIMAL(15,2)
);

ALTER TABLE BCK_PARM_RECEIPT_THRESHOLDS ADD CONSTRAINT 
 	BCK_PARM_RECEIPT_THRESHOLDS_PK PRIMARY KEY (OBJID);
	

CREATE TABLE  BCK_PARM_CYCLE_DATES (
	OBJID NUMBER(19,0) NOT NULL ENABLE, 
	CYCLE_CODE VARCHAR2(8 CHAR), 
	START_DATE DATE, 
	END_DATE DATE, 
	ISSUE_DATE DATE, 
	REF_DATE DATE, 
	DUE_DATE DATE
);
   
ALTER TABLE BCK_PARM_CYCLE_DATES ADD CONSTRAINT BCK_PARM_CYCLE_DATES_PK 
   PRIMARY KEY (OBJID);   
 


-- Table: QLF_SERVICES
CREATE TABLE QLF_SERVICES (	
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	SVC_CODE 			NUMBER(19,0) 	NOT NULL,
	DESCRIPTION 		VARCHAR2(32) 	NOT NULL,
	SHORT_DESC 			VARCHAR2(5) 	NOT NULL,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_SERVICES ADD CONSTRAINT QLF_SERVICES_PK
	PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX QLF_SERVICES_IDX1 ON QLF_SERVICES (SVC_CODE);

CREATE UNIQUE INDEX QLF_SERVICES_IDX2 ON QLF_SERVICES (SHORT_DESC);

-- Table: QLF_PLANS
CREATE TABLE QLF_PLANS (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	TMCODE 				NUMBER(19,0) 	NOT NULL,
	DESCRIPTION 		VARCHAR2(32) 	NOT NULL,
	SHORT_DESC 			VARCHAR2(5) 	NOT NULL,
	PLAN_NAME 			VARCHAR2(32) 	NOT NULL,
	STATE	 			VARCHAR2(2) 	NOT NULL,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_PLANS ADD CONSTRAINT QLF_PLANS_PK
	PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX QLF_PLANS_IDX1 ON QLF_PLANS (SHORT_DESC, STATE);

CREATE UNIQUE INDEX QLF_PLANS_IDX2 ON QLF_PLANS (PLAN_NAME, STATE);

-- Table: QLF_TARIFF_ZONE
CREATE TABLE QLF_TARIFF_ZONE (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	ZONE_CODE 			NUMBER(19,0) 	NOT NULL,
	DESCRIPTION 		VARCHAR2(32) 	NOT NULL,
	SHORT_DESC 			VARCHAR2(5) 	NOT NULL,
	TARIFF_TYPE			CHAR(1)					,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_TARIFF_ZONE ADD CONSTRAINT QLF_TARIFF_ZONE_PK
	PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX QLF_TARIFF_ZONE_IDX1 ON QLF_TARIFF_ZONE (ZONE_CODE);

CREATE UNIQUE INDEX QLF_TARIFF_ZONE_IDX2 ON QLF_TARIFF_ZONE (SHORT_DESC);

-- Table: QLF_USAGE_GROUP
CREATE TABLE QLF_USAGE_GROUP (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	NAME		 		VARCHAR2(50) 	NOT NULL,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_USAGE_GROUP ADD CONSTRAINT QLF_USAGE_GROUP_PK
	PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX QLF_USAGE_GROUP_IDX1 ON QLF_USAGE_GROUP (NAME);

-- Table: QLF_RATE_TIME_ZONE
CREATE TABLE QLF_RATE_TIME_ZONE (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	TTCODE	 			NUMBER(19,0) 	NOT NULL,
	DESCRIPTION 		VARCHAR2(32) 	NOT NULL,
	SHORT_DESC 			VARCHAR2(5) 	NOT NULL,
	BILL_FILE_CODE 		VARCHAR2(3) 	NOT NULL,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_RATE_TIME_ZONE ADD CONSTRAINT QLF_RATE_TIME_ZONE_PK
	PRIMARY KEY (OBJID);

CREATE UNIQUE INDEX QLF_RATE_TIME_ZONE_IDX1 ON QLF_RATE_TIME_ZONE (TTCODE);

CREATE UNIQUE INDEX QLF_RATE_TIME_ZONE_IDX2 ON QLF_RATE_TIME_ZONE (SHORT_DESC);

CREATE INDEX QLF_RATE_TIME_ZONE_IDX3 ON QLF_RATE_TIME_ZONE (BILL_FILE_CODE);

-- many-to-many tables

-- Table: QLF_SVC_PLAN_ASSOCIATION
CREATE TABLE QLF_SERVICES_PLANS (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	PLANS_UID			NUMBER(19,0) 	NOT NULL,
	SERVICES_UID		NUMBER(19,0) 	NOT NULL,
	CONTAIN_FLG			CHAR(1)					,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_SERVICES_PLANS ADD CONSTRAINT QLF_SERVICES_PLANS_PK
	PRIMARY KEY (OBJID);

ALTER TABLE QLF_SERVICES_PLANS ADD CONSTRAINT QLF_SERVICES_PLANS_FK1
	FOREIGN KEY (PLANS_UID) REFERENCES QLF_PLANS (OBJID);
	
ALTER TABLE QLF_SERVICES_PLANS ADD CONSTRAINT QLF_SERVICES_PLANS_FK2
	FOREIGN KEY (SERVICES_UID) REFERENCES QLF_SERVICES (OBJID);

CREATE UNIQUE INDEX QLF_SERVICES_PLANS_IDX1 ON QLF_SERVICES_PLANS (PLANS_UID, SERVICES_UID);

-- Table: QLF_TARIFF_ZONE_GROUP_ASSOCIATION
CREATE TABLE QLF_TARIFFZONE_USAGEGROUP (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	TARIFF_ZONE_UID		NUMBER(19,0) 	NOT NULL,
	USAGE_GROUP_UID		NUMBER(19,0) 	NOT NULL,
	ALLOWED_SECTION		CHAR(1)					,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)
);

ALTER TABLE QLF_TARIFFZONE_USAGEGROUP ADD CONSTRAINT QLF_TARIFFZONE_USAGEGROUP_PK
	PRIMARY KEY (OBJID);

ALTER TABLE QLF_TARIFFZONE_USAGEGROUP ADD CONSTRAINT QLF_TARIFFZONE_USAGEGROUP_FK1
	FOREIGN KEY (TARIFF_ZONE_UID) REFERENCES QLF_TARIFF_ZONE (OBJID);
	
ALTER TABLE QLF_TARIFFZONE_USAGEGROUP ADD CONSTRAINT QLF_TARIFFZONE_USAGEGROUP_FK2
	FOREIGN KEY (USAGE_GROUP_UID) REFERENCES QLF_USAGE_GROUP (OBJID);

CREATE UNIQUE INDEX QLF_TARIFFZONE_USAGEGROUP_IDX1 ON QLF_TARIFFZONE_USAGEGROUP (TARIFF_ZONE_UID, USAGE_GROUP_UID);

-- Table: QLF_USAGE_RATES
CREATE TABLE QLF_USAGE_RATES (
 	OBJID 				NUMBER(19,0) 	NOT NULL, 
	TARIFF_ZONE_UID		NUMBER(19,0) 	NOT NULL,
	PLANS_UID			NUMBER(19,0) 	NOT NULL,
	SERVICES_UID			NUMBER(19,0) 	NOT NULL,
	GEO_DM_UID			NUMBER(19,0) 	NOT NULL,
	RATE_TIME_ZONE_UID	NUMBER(19,0) 	NOT NULL,
	EFFECTIVE_DATE		DATE		NOT NULL,
	EXPIRATION_DATE		DATE			,
	RATE				NUMBER(14,6)			,
	CUSTOM_1 			VARCHAR2(30)			, 
	CUSTOM_2 			VARCHAR2(30)			, 
	CUSTOM_3 			VARCHAR2(30)			
);

ALTER TABLE QLF_USAGE_RATES ADD CONSTRAINT QLF_USAGE_RATES_PK
	PRIMARY KEY (OBJID);

ALTER TABLE QLF_USAGE_RATES ADD CONSTRAINT QLF_USAGE_RATES_FK1
	FOREIGN KEY (TARIFF_ZONE_UID) REFERENCES QLF_TARIFF_ZONE (OBJID);
	
ALTER TABLE QLF_USAGE_RATES ADD CONSTRAINT QLF_USAGE_RATES_FK2
	FOREIGN KEY (PLANS_UID) REFERENCES QLF_PLANS (OBJID);
	
ALTER TABLE QLF_USAGE_RATES ADD CONSTRAINT QLF_USAGE_RATES_FK3
	FOREIGN KEY (SERVICES_UID) REFERENCES QLF_SERVICES (OBJID);

ALTER TABLE QLF_USAGE_RATES ADD CONSTRAINT QLF_USAGE_RATES_FK4
	FOREIGN KEY (GEO_DM_UID) REFERENCES BCK_GEO_DM (OBJID);

ALTER TABLE QLF_USAGE_RATES ADD CONSTRAINT QLF_USAGE_RATES_FK5
	FOREIGN KEY (RATE_TIME_ZONE_UID) REFERENCES QLF_RATE_TIME_ZONE (OBJID);

CREATE UNIQUE INDEX QLF_USAGE_RATES_IDX1 ON QLF_USAGE_RATES (TARIFF_ZONE_UID, PLANS_UID, SERVICES_UID, GEO_DM_UID, RATE_TIME_ZONE_UID, EFFECTIVE_DATE);


create table AUT_USER (
   cd_user  varchar2(8) NOT NULL PRIMARY KEY,
   tx_password char(32),
   nm_user varchar2(32),
   dt_create date NOT NULL,
   dt_last_access date,
   qt_logins integer,
   dt_status date NOT NULL,
   st_status CHAR(1) NOT NULL, 
   cd_user_last_update varchar2(8) NOT NULL
);

CREATE INDEX IDX_USER_STATUS ON AUT_USER (ST_STATUS, DT_STATUS);

create table AUT_GROUP (
   cd_group INTEGER NOT NULL PRIMARY KEY,
   nm_group varchar2(32) NOT NULL,
   dt_create date NOT NULL,
   dt_status date NOT NULL,
   st_status CHAR(1) NOT NULL,
   cd_user_last_update varchar2(8) NOT NULL
);

CREATE INDEX IDX_GROUP_NAME ON AUT_GROUP (NM_GROUP);

CREATE INDEX IDX_GROUP_STATUS ON AUT_GROUP (ST_STATUS, DT_STATUS);

CREATE TABLE AUT_PERM (
   cd_perm INTEGER NOT NULL primary key,
   nm_perm varchar2(32),
   tx_desc varchar2(256)
);
   
CREATE INDEX IDX_NM_PERM ON AUT_PERM (NM_PERM);

CREATE TABLE AUT_USER_GROUP_ASGM (
   cd_user varchar2(8) NOT NULL,
   cd_group INTEGER NOT NULL,
   dt_asgm date NOT NULL,
   dt_expr date,
   cd_user_last_update varchar2(8) NOT NULL,
   PRIMARY KEY(cd_user,cd_group,dt_asgm)
);

ALTER TABLE AUT_USER_GROUP_ASGM 
  ADD CONSTRAINT AUT_USER_GROUP_USER_FK FOREIGN KEY (cd_user) 
      REFERENCES AUT_USER (cd_user);

ALTER TABLE AUT_USER_GROUP_ASGM 
  ADD CONSTRAINT AUT_USER_GROUP_GROUP_FK FOREIGN KEY (cd_group) 
      REFERENCES AUT_GROUP (cd_group);

CREATE TABLE AUT_GROUP_PERM_ASGM (
   cd_group INTEGER NOT NULL,
   cd_perm INTEGER NOT NULL,
   dt_asgm date NOT NULL,
   dt_expr date,
   cd_user_last_update varchar2(8) NOT NULL,
   PRIMARY KEY(cd_group,cd_perm,dt_asgm)
);

ALTER TABLE AUT_GROUP_PERM_ASGM 
  ADD CONSTRAINT AUT_GROUP_PERM_GROUP_FK FOREIGN KEY (cd_group) 
      REFERENCES AUT_GROUP (cd_group);

ALTER TABLE AUT_GROUP_PERM_ASGM 
  ADD CONSTRAINT AUT_GROUP_PERM_PERM_FK FOREIGN KEY (cd_perm) 
      REFERENCES AUT_PERM (cd_perm);


-- table: WEB_USER
create table WEB_USER (
	USER_ID			integer 		NOT NULL,
	SECURITY_ID		varchar2(128)	NOT NULL,
	USER_EMAIL		varchar2(512)	NOT NULL,
	USER_NAME		varchar2(512)			,
	LOGIN_TRIES		integer 		NOT NULL
);

alter table WEB_USER add constraint WEB_USER_PK
      primary key (USER_ID);
      
alter table WEB_USER add constraint WEB_USER_UK1
      unique (SECURITY_ID);

alter table WEB_USER add constraint WEB_USER_UK2
      unique (USER_EMAIL);
      
create index WEB_USER_IDX1 on WEB_USER (USER_NAME);

create sequence USER_SEQUENCE start with 1;


-- table: PROC_REQUEST
create table PROC_REQUEST (
	REQUEST_ID 			integer			NOT NULL,
	REQUEST_LABEL    	varchar2(256)			,
	LATEST_STATUS   	integer			NOT NULL
);

alter table PROC_REQUEST add constraint PROC_REQUEST_PK 
      primary key (REQUEST_ID);

create index PROC_REQUEST_IDX1 on PROC_REQUEST (REQUEST_LABEL);

create sequence PROC_REQUEST_SEQUENCE start with 1;


-- table: PROC_REQUEST_INFO
create table PROC_REQUEST_INFO (
	REQUEST_ID      	integer			NOT NULL,
	INFO_KEY			varchar2(64)	NOT NULL,
	INFO_VALUE			varchar2(256)				
);

alter table PROC_REQUEST_INFO add constraint PROC_REQUEST_INFO_PK 
      primary key (REQUEST_ID, INFO_KEY);

alter table PROC_REQUEST_INFO add constraint PROC_REQUEST_INFO_FK1
      foreign key (REQUEST_ID) references PROC_REQUEST (REQUEST_ID);


-- table: PROC_REQUEST_INFILE
create table PROC_REQUEST_INFILE (
	FILENAME			varchar2(512)	NOT NULL,
	REQUEST_ID			integer			NOT NULL
);

alter table PROC_REQUEST_INFILE add constraint PROC_REQUEST_INFILE_PK
      primary key  (FILENAME, REQUEST_ID);

alter table PROC_REQUEST_INFILE add constraint PROC_REQUEST_INFILE_FK1
      foreign key (REQUEST_ID) references PROC_REQUEST (REQUEST_ID);

create index PROC_REQUEST_INFILE_IDX1 on PROC_REQUEST_INFILE (REQUEST_ID);


-- table: PROC_REQUEST_TRAIL
create table PROC_REQUEST_TRAIL (
	TRAIL_ID			integer			NOT NULL,
	REQUEST_ID			integer			NOT NULL,
	STATUS_ID			integer			NOT NULL,
	TRAIL_DATETIME		date			NOT NULL,
	TRAIL_MESSAGE		varchar2(512)			
);

alter table PROC_REQUEST_TRAIL add constraint PROC_REQUEST_TRAIL_PK
      primary key  (TRAIL_ID);

alter table PROC_REQUEST_TRAIL add constraint PROC_REQUEST_TRAIL_FK1
      foreign key (REQUEST_ID) references PROC_REQUEST (REQUEST_ID);
      
create index PROC_REQUEST_TRAIL_IDX1 on PROC_REQUEST_TRAIL (REQUEST_ID);      

create sequence PROC_TRAIL_SEQUENCE start with 1;


-- table: PROC_REQUEST_OUTFILE
create table PROC_REQUEST_OUTFILE (
	FILE_ID				integer			NOT NULL,
	TRAIL_ID			integer			NOT NULL,
	FILENAME			varchar2(512)	NOT NULL
);

alter table PROC_REQUEST_OUTFILE add constraint PROC_REQUEST_OUTFILE_PK
      primary key  (FILE_ID);

alter table PROC_REQUEST_OUTFILE add constraint PROC_REQUEST_OUTFILE_FK1
      foreign key (TRAIL_ID) references PROC_REQUEST_TRAIL (TRAIL_ID);
      
create index PROC_REQUEST_OUTFILE_IDX1 on PROC_REQUEST_OUTFILE (TRAIL_ID);

create index PROC_REQUEST_OUTFILE_IDX2 on PROC_REQUEST_OUTFILE (FILENAME);      

create sequence OUTFILE_SEQUENCE start with 1;


-- table: PROC_OUTFILE_ATTRS
create table PROC_OUTFILE_ATTRS (
	FILE_ID				integer			NOT NULL,
	ATTR_KEY			varchar2(64)	NOT NULL,
	ATTR_VALUE			varchar2(256)			
);

alter table PROC_OUTFILE_ATTRS add constraint PROC_OUTFILE_ATTRS_PK
      primary key (FILE_ID, ATTR_KEY);

alter table PROC_OUTFILE_ATTRS add constraint PROC_REQUEST_ATTRS_FK1
      foreign key (FILE_ID) references PROC_REQUEST_OUTFILE (FILE_ID);



-- table: WEB_REQUEST
create table WEB_REQUEST (
	REQUEST_ID 			integer			NOT NULL,
	START_DATE			date			NOT NULL,
	REQUEST_STATUS		integer			NOT NULL,
	END_DATE    		date					,
	OWNER_ID   			integer			
);

alter table WEB_REQUEST add constraint WEB_REQUEST_PK 
      primary key (REQUEST_ID);

create index WEB_REQUEST_IDX1 on WEB_REQUEST (START_DATE);
create index WEB_REQUEST_IDX2 on WEB_REQUEST (END_DATE);
create index WEB_REQUEST_IDX3 on WEB_REQUEST (REQUEST_STATUS);
create index WEB_REQUEST_IDX4 on WEB_REQUEST (OWNER_ID);

create sequence WEB_REQUEST_SEQUENCE start with 1;


-- table: WEB_REQUEST_REQUESTS
create table WEB_REQUEST_REQUESTS (
	WEB_REQUEST_ID      integer			NOT NULL,
	PROC_REQUEST_ID		integer			NOT NULL		
);

alter table WEB_REQUEST_REQUESTS add constraint WEB_REQUEST_REQUESTS_PK 
      primary key (WEB_REQUEST_ID, PROC_REQUEST_ID);

alter table WEB_REQUEST_REQUESTS add constraint WEB_REQUEST_REQUESTS_FK1
      foreign key (WEB_REQUEST_ID) references WEB_REQUEST (REQUEST_ID);

alter table WEB_REQUEST_REQUESTS add constraint WEB_REQUEST_REQUESTS_FK2
      foreign key (PROC_REQUEST_ID) references PROC_REQUEST (REQUEST_ID);


-- table: WEB_REQUEST_INFO
create table WEB_REQUEST_INFO (
	WEB_REQUEST_ID		integer			NOT NULL,
	INFO_KEY			varchar2(64)	NOT NULL,
	INFO_VALUE			varchar2(256)
);

alter table WEB_REQUEST_INFO add constraint WEB_REQUEST_INFO_PK
      primary key  (WEB_REQUEST_ID, INFO_KEY);

alter table WEB_REQUEST_INFO add constraint WEB_REQUEST_INFO_FK1
      foreign key (WEB_REQUEST_ID) references WEB_REQUEST (REQUEST_ID);


-- table: WEB_NOTIFICATION
create table WEB_NOTIFICATION (
	NOTIFICATION_ID		integer			NOT NULL,
	WEB_REQUEST_ID		integer			NOT NULL,
	EMAIL_ADDRESS		varchar2(256)	NOT NULL,
	SENT_DATETIME		date
);

alter table WEB_NOTIFICATION add constraint WEB_NOTIFICATION_PK
      primary key  (NOTIFICATION_ID);

alter table WEB_NOTIFICATION add constraint WEB_NOTIFICATION_FK1
      foreign key (WEB_REQUEST_ID) references WEB_REQUEST (REQUEST_ID);

create index WEB_NOTIFICATION_IDX1 on WEB_NOTIFICATION (WEB_REQUEST_ID);

create sequence WEB_NOTIFICATION_SEQUENCE start with 1;


-- table: WEB_BUNDLEFILE
create table WEB_BUNDLEFILE (
	FILE_ID				integer			NOT NULL,
	WEB_REQUEST_ID		integer			NOT NULL,
	FILENAME			varchar2(512)	NOT NULL,
	CREATE_DATETIME		date			NOT NULL,
	MESSAGE				varchar2(512)
);

alter table WEB_BUNDLEFILE add constraint WEB_BUNDLEFILE_PK
      primary key  (FILE_ID);

alter table WEB_BUNDLEFILE add constraint WEB_BUNDLEFILE_FK1
      foreign key (WEB_REQUEST_ID) references WEB_REQUEST (REQUEST_ID);

create index WEB_BUNDLEFILE_IDX1 on WEB_BUNDLEFILE (WEB_REQUEST_ID);

create sequence BUNDLEFILE_SEQUENCE start with 1;


  


--                                                                                                                 
-- PRUGE SCRIPTS
--

CREATE GLOBAL TEMPORARY TABLE request_cleanup_tmp ( id_nbr NUMBER ) ON COMMIT DELETE ROWS;




CREATE OR REPLACE PROCEDURE BILLCHKDB.cleanup_web_request(reqId NUMBER) 
AUTHID CURRENT_USER 
IS
	v_code NUMBER;
	v_errm VARCHAR2(64);
BEGIN

  DBMS_OUTPUT.PUT_LINE('Starting to remove request ' || TO_CHAR(reqId) );

	INSERT INTO request_cleanup_tmp ( SELECT proc_request_id FROM web_request_requests WHERE web_request_id = reqId );
	DBMS_OUTPUT.PUT_LINE('Found ' || TO_CHAR(SQL%ROWCOUNT) || ' accounts to remove.');
	
	DELETE FROM proc_request_infile WHERE request_id IN ( SELECT id_nbr FROM request_cleanup_tmp );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from input file table.');
	
	DELETE FROM proc_request_info   WHERE request_id IN ( SELECT id_nbr FROM request_cleanup_tmp );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from account info table.');

  DELETE FROM proc_outfile_attrs where file_id IN (
    SELECT /*+ rule */ file_id FROM proc_request_outfile WHERE trail_id IN ( 
       SELECT trail_id FROM proc_request_trail WHERE request_id IN (SELECT id_nbr FROM request_cleanup_tmp)
    )
  );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from output attrs file table.');

  DELETE FROM proc_request_outfile WHERE trail_id IN ( 
       SELECT /*+ rule */ trail_id FROM proc_request_trail WHERE request_id IN (SELECT id_nbr FROM request_cleanup_tmp)
  );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from output file table.');
	
	DELETE FROM proc_request_trail  WHERE request_id IN ( SELECT id_nbr FROM request_cleanup_tmp );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from account status history table.');
  	
	DELETE FROM web_request_requests WHERE web_request_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from account-relation table.');
  
	DELETE FROM proc_request WHERE request_id IN ( SELECT id_nbr FROM request_cleanup_tmp );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from account table.');

	DELETE FROM web_bundlefile WHERE web_request_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from report files table.');

	DELETE FROM web_notification WHERE web_request_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from notification table.');

	DELETE FROM web_request_info WHERE web_request_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from request info table.');

	DELETE FROM web_request WHERE request_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from request table.');
	
	COMMIT;

	-- reindexing web tables
	-- DBMS_OUTPUT.PUT_LINE('Reindexing account-related tables.');
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE web_bundlefile COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE web_request_info COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE web_request_requests COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
		
	-- reindexing tables from request_base 
	-- DBMS_OUTPUT.PUT_LINE('Reindexing request-related tables.');
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE proc_request_infile COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE proc_request_info COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE proc_request_trail COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE proc_request COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	
	DBMS_OUTPUT.PUT_LINE('Finished removing request ' || TO_CHAR(reqId) );
	
	EXCEPTION
	
		WHEN OTHERS THEN
			ROLLBACK;
			v_code := SQLCODE;
			v_errm := SUBSTR(SQLERRM, 1 , 64);
			DBMS_OUTPUT.PUT_LINE('Error removing request ' || TO_CHAR(reqId) );
			DBMS_OUTPUT.PUT_LINE('Error code: ' || v_code );
			DBMS_OUTPUT.PUT_LINE('Error message: ' || v_errm );
	
END;
/


CREATE OR REPLACE PROCEDURE BILLCHKDB.cleanup_consequences(reqId NUMBER) 
AUTHID CURRENT_USER 
IS
	v_code NUMBER;
	v_errm VARCHAR2(64);
BEGIN

  	DBMS_OUTPUT.PUT_LINE('Starting to remove consequences for ' || TO_CHAR(reqId) );

	INSERT INTO request_cleanup_tmp ( SELECT attribute_uid FROM bck_consequence WHERE transaction_id = reqId );	

	DELETE FROM bck_consequence WHERE transaction_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from rules consequence table.');

	DELETE FROM bck_consequence_attr WHERE objid IN ( SELECT id_nbr FROM request_cleanup_tmp );
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from consequence attribute table.');

	DELETE FROM bck_invoice_fact WHERE transaction_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from invoice data table.');

	DELETE FROM bck_contract_totals_fact WHERE transaction_id = reqId;
	DBMS_OUTPUT.PUT_LINE('Removed ' || TO_CHAR(SQL%ROWCOUNT) || ' rows from contract data table.');
		
	COMMIT;

	-- reindexing web tables
	-- DBMS_OUTPUT.PUT_LINE('Reindexing consequence-related tables.');
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE bck_consequence COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE bck_consequence_attr COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE bck_invoice_fact COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	-- EXECUTE IMMEDIATE 'ANALYZE TABLE bck_contract_totals_fact COMPUTE STATISTICS FOR ALL INDEXES FOR ALL COLUMNS';
	
	DBMS_OUTPUT.PUT_LINE('Finished removing consequences for ' || TO_CHAR(reqId) );
	
	EXCEPTION
	
		WHEN OTHERS THEN
			ROLLBACK;
			v_code := SQLCODE;
			v_errm := SUBSTR(SQLERRM, 1 , 64);
			DBMS_OUTPUT.PUT_LINE('Error removing request ' || TO_CHAR(reqId) );
			DBMS_OUTPUT.PUT_LINE('Error code: ' || v_code );
			DBMS_OUTPUT.PUT_LINE('Error message: ' || v_errm );
	
END;
/

CREATE OR REPLACE PROCEDURE BILLCHKDB.cleanup_billcheckout(reqId NUMBER) 
AUTHID CURRENT_USER 
IS 
BEGIN
	DBMS_OUTPUT.PUT_LINE('Starting cleanup process.');
	cleanup_web_request(reqId);
	cleanup_consequences(reqId);
	DBMS_OUTPUT.PUT_LINE('Cleanup process finished.');
END;
/
