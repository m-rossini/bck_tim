#created on: 10/10/2007
package br.com.auster.tim.billchekout

#list any import classes here.
import br.com.auster.billcheckout.consequence.telco.TelcoConsequenceBuilder;
import br.com.auster.billcheckout.consequence.telco.TelcoConsequence;
import br.com.auster.billcheckout.consequence.telco.AccountDimension;
import br.com.auster.billcheckout.consequence.telco.GeographicDimension;
import br.com.auster.billcheckout.consequence.telco.TimeDimension;
import br.com.auster.billcheckout.consequence.telco.CarrierDimension;
import br.com.auster.billcheckout.consequence.telco.CycleDimension;
import br.com.auster.tim.om.invoice.TIMUsageDetail;
import br.com.auster.om.invoice.Account;
import br.com.auster.tim.om.invoice.UsagePromotionDetail;
import br.com.auster.tim.om.invoice.ContractInfoSection;
import br.com.auster.tim.om.invoice.ContractUsageGroupSubsection;
import br.com.auster.tim.billcheckout.param.ContractPromotionsVO;

import java.util.Date;

#declare any global variables here
global br.com.auster.billcheckout.consequence.DimensionCache dimensionCache;
global br.com.auster.tim.billcheckout.param.ContractPromotionsCache contractPromotionsCache;
global br.com.auster.billcheckout.consequence.telco.TelcoConsequenceBuilder consequenceBuilder;
global java.util.List results;


rule "Regra 19.6 - Detecting promotions out of validity"

	when

		TIMUsageDetail ( $microCellDesc : microCellDesc -> ($microCellDesc!= null),
						 discountAmount > 0,
						 $callDate : usageDate,
						 $callTime : usageTime,
						 $calledNumber :calledNumber,
						 $voiceFlag : voiceUsage,
						 $eventFlag : eventUsage,
						 $sectionName : sectionName,
						 $contractNumber : contractNumber,
						 $accessNumber : channelId
					   )

		Account( $carrierCode : carrierCode,
				 $carrierState : carrierState
			   )

		eval ($voiceFlag.booleanValue() || $eventFlag.booleanValue())

	then

		ContractPromotionsVO contractPromotions = (ContractPromotionsVO) contractPromotionsCache.getFromCache(ContractPromotionsVO.createAlternateKey($contractNumber, $microCellDesc));

		if (contractPromotions != null) {

			Date promoActivDate = contractPromotions.getActivationDate();
			Date promoExpirDate = contractPromotions.getExpirationDate();

			if (promoActivDate.after($callDate) ||
			    ((promoExpirDate != null) && (promoExpirDate.before($callDate))) ) {

				consequenceBuilder.setRule("R19-6","Promoção fora da vigência");
				consequenceBuilder.setAccount((AccountDimension) dimensionCache.getFromCache("account"));
				consequenceBuilder.setGeographics((GeographicDimension) dimensionCache.getFromCache("geo"));
				consequenceBuilder.setTime((TimeDimension) dimensionCache.getFromCache("time"));
				consequenceBuilder.setCycle((CycleDimension) dimensionCache.getFromCache("cycle"));
				consequenceBuilder.setCarrier((CarrierDimension) dimensionCache.getFromCache($carrierCode));

				TelcoConsequence c = (TelcoConsequence) consequenceBuilder.getConsequence();

				c.setDescription("Data da chamada fora do período de vigência da promoção.");
				c.addAttribute("Número do Contrato", $contractNumber);
				c.addAttribute("Número do Acesso", $accessNumber);
				c.addAttribute("Nome da Seção", $sectionName);
				c.addDateAttribute("Data da Chamada", $callDate);
				c.addTimeAttribute("Hora da Chamada", $callTime);
				c.addAttribute("Número de Destino", $calledNumber);
				c.addAttribute("Descrição da Promoção", contractPromotions.getPromotionDesc());
				c.addDateAttribute("Data de Ativação", contractPromotions.getActivationDate());
				c.addDateAttribute("Data de Vigência", contractPromotions.getExpirationDate());

				results.add(c);
			}

		}

end